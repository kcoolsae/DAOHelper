/*
 * InsertSQLStatement.java
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Copyright Â© 2016-2024 Kris Coolsaet (Universiteit Gent)
 *
 * This software is distributed under the MIT License - see files LICENSE and AUTHORS
 * in the top level project directory.
 */

package be.ugent.caagt.dao.helper;

import be.ugent.caagt.dao.DataAccessException;

import java.sql.*;
import java.util.ArrayList;

/**
 * Represents an insert statement. Allows value-clauses. Finalize by calling {@link #execute} or {@link #create}.
 */
public class InsertSQLStatement extends InsertOrUpsert<InsertSQLStatement> {

    InsertSQLStatement(String table, BaseDAC context) {
        super(table,context);
        this.values = new ArrayList<>();
    }

    public InsertSQLStatement value(String name, Parameter value) {
        InsertSQLStatement result = new InsertSQLStatement(table, context);
        result.values = new ArrayList<>(this.values);
        result.values.add(new NamedParameter(name, value));
        return result;
    }

    public InsertSQLStatement value(NamedParameterList parameters) {
        InsertSQLStatement result = new InsertSQLStatement(table, context);
        result.values = new ArrayList<>(this.values);
        parameters.addToParameterList(result.values);
        return result;
    }

    /**
     * Execute an insert and return the generated key as an int. Assumes the generated key is the first column of
     * the table.
     * @see #create(String)
     */
    public int create() throws DataAccessException {
        try (PreparedStatement ps = context.getConnection().prepareStatement(getFullStatement(), Statement.RETURN_GENERATED_KEYS)) {
            initParameters(ps);
            ps.executeUpdate();
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);
                } else {
                    throw new IllegalStateException("No key generated by insert statement");
                }
            }
        } catch (SQLException ex) {
            throw BaseDAO.convert(ex);
        }
    }

    /**
     * Same as {@link #create()} but returns the field explicitly named as a parameter. Useful when the
     * generated key is not in the first column of the table. Might also be slightly faster because fewer data
     * is sent from server to client.
     */
    public int create(String columnName) throws DataAccessException {
        try (PreparedStatement ps = context.getConnection().prepareStatement(
                getFullStatement(),
                new String[]{ columnName.toLowerCase() }    // BUG IN POSTGRES?
                )) {
            initParameters(ps);
            ps.executeUpdate();
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(columnName);
                } else {
                    throw new IllegalStateException("No key generated by insert statement");
                }
            }
        } catch (SQLException ex) {
            throw BaseDAO.convert(ex);
        }
    }
}
