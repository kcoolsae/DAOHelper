/*
 * RawTest.java
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Copyright Â© 2016-2024 Kris Coolsaet (Universiteit Gent)
 *
 * This software is distributed under the MIT License - see files LICENSE and AUTHORS
 * in the top level project directory.
 */

package be.ugent.caagt.dao.helper;

import be.ugent.caagt.dao.DataAccessException;
import org.junit.Before;
import org.junit.Test;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests some 'raw' methods
 */
public class RawTest extends TestDAO {

    private int key;

    @Before
    public void setUp() {
        try (PreparedStatement stat = prepareAutoGenerated("INSERT INTO persons(name,first_name) VALUES (?,?)")) {
            stat.setString(1, "Bond");
            stat.setString(2, "James");
            stat.executeUpdate();
            try (ResultSet rs = stat.getGeneratedKeys()) {
                rs.next();
                key = rs.getInt(1);
            }
        } catch (SQLException ex) {
            throw new DataAccessException("Could not insert", ex);
        }
    }

    @Test
    public void prepareStatement() {
        // update
        try (PreparedStatement stat = prepareStatement("UPDATE persons SET name = 'Doe' WHERE name = ?")) {
            stat.setString(1, "Bond");
            assertThat(
                    stat.executeUpdate()
            ).isEqualTo(1);
        } catch (SQLException sql) {
            throw new DataAccessException("Could not delete");
        }

        // and check
        try (PreparedStatement stat = prepareStatement("SELECT id FROM persons WHERE name = 'Doe'");
             ResultSet rs = stat.executeQuery()
        ) {
            assertThat(rs.next()).isTrue();
            assertThat(rs.getInt(1)).isEqualTo(key);
        } catch (SQLException ex) {
            throw new DataAccessException("Could not delete");
        }
    }

    @Test
    public void prepareCall() {
        // update
        try (CallableStatement stat = prepareCall(
                "{call insert_person(?,?)}"
        )) {
            stat.setString(1, "potter");
            stat.setString(2, "harry");
            stat.executeUpdate();
        } catch (SQLException ex) {
            throw new DataAccessException(ex);
        }
        // retrieve
        try (PreparedStatement stat = prepareStatement(
                "SELECT 1 FROM persons WHERE name='potter'");
             ResultSet rs = stat.executeQuery()
        ) {
            assertThat (
                    rs.next()
            ).isTrue();
        } catch (SQLException ex) {
            throw new DataAccessException(ex);
        }

    }
}
